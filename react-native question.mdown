#react-native 遇到的问题

###安装jdk
###安装android SDK
node.js
安装reac-native命令行工具
npm install -g react-native-cli

创建项目
react-native init projectName
运行packger
react-native start **注意**不可先运行run android```
    FYI 在这地方卡住了好久···

###接下来  安卓运行
保持packager开启，另外打开一个命令行窗口，然后在工程目录下运行

react-native run-android

首次运行需要等待数分钟并从网上下载gradle依赖。（这个过程屏幕上可能出现很多小数点，表示下载进度。这个时间可能耗时很久，也可能会不停报错链接超时、连接中断等等——取决于你的网络状况和墙的不特定阻断。总之要顺利下载，请使用稳定有效的科学上网工具。）

安卓调试

打开Chrome，访问 http://localhost:8081/debugger-ui，应当能看到一个页面。按F12打开开发者菜单。

在模拟器或真机菜单中选择Debug JS，即可开始调试。           

完了
被卡住了
！！！

Downloading https://services.gradle.org/distributions/gradle-2.4-all.zip

自己的网络明明可以访问
what？

**被卡住**
---
2.png

查看 http://localhost:8081/index.android.bundle?platform=android 是否能打开；

启动模拟器，运行adb devices查看是否设备已连接上；

保持packager开启，另外打开一个命令行窗口，然后在工程目录下运行；

 

运行React Native

---

石头  卡住了
没法玩了
···············

###over


---
happy to say maybe OK 

question:

Error:A problem occurred configuring project ':app'.

> Could not resolve all dependencies for configuration ':app:_debugCompile'.

   > Could not resolve com.android.support:appcompat-v7:21.+.

     Required by:

         Exam:app:unspecified

      > Failed to list versions for com.android.support:appcompat-v7.

         > Unable to load Maven meta-data from https://jcenter.bintray.com/com/android/support/appcompat-v7/maven-metadata.xml.
         > 

resolve：

just go to Tools -> Android -> Android SDK Manager, then check “Android Support Repository” and “Android Support Library” under “Extra” and install them.

连接wifi时遇到问题
腾讯wifi无法链接到服务器
360wifi可以



###MVC 的架构：

Model 是数据
View 是数据在 app 中的表现
Controller 处理数据交互逻辑

    class Example extends React.Component {
        render() {
            // 使用现有数据呈现 View，有可能是一个窗体
            // 窗体将数据提交给 handleSubmit 函数
        }

        handleSubmit(e) {
            // 处理数据，controller 的逻辑
        }
    };

每个 React 组件都有两种类型的数据，他们拥有不一样的角色：
props 是在组件创建时就传入的数据，是不可变的。
state 是组件可变的数据。

为了减少重复，建议 app 组件层级关系中最高层级的父组件（有时称为容器组件）拥有 state ，然后使用 props 向下传递给子组件。这样数据单向地从上游往下游流动，使得整个流程很快，呈现模块化。

Redux 是一个实现了 Flux 架构，但又从 Flux 中剥离的框架。react-redux 包提供的官方的数据绑定实现 使得和 React 的集成变得很简单。
Redux 中没有 Dispatcher，并且对于整个 app 的 state，只有一个 Store。
那么 Redux 中的数据流到底是怎样的？详细的部分我们下面后阐述，现在让我们看看大致的流程：
React 可以触发 Action，比如按钮点击按钮。
Action 是对象，包含一个类型以及相关的数据，通过 Store 的 dispatch() 函数发送到 Store。
Store 接收 Action 的数据并将其连同当前的 state 树（state 树 是包含所有 state 的一种特殊的数据结构，是一个单一的对象）发给 Reducer。
Reducer 是一个 pure function，它接收一个之前的 state 和一个 Action；并基于此 Action 将会产生的影响，返回一个新的 state。一个 app 可以包含一个 Reducer，但大部分的 app 最后会包含多个，每个处理 state 中不同的部分，下文 会提到。
Store 接收到新的 state，并替换当前的。
当 state 变化时，Store 触发 事件。
任何 订阅了事件 的组件 从 Store 中提取新的 state。
组件使用新的 state 进行更新。

---

我们通过 JavaScript 对象传递一些方法到 React.createClass() 来创建一个新的 React 组件。其中最重要的方法是 render ，该方法返回一颗 React 组件树，这棵树最终将会渲染成 HTML 。

这里的 <div> 标签不是真正的 DOM 节点；他们是 React div 组件的实例。你可以认为这些标签就是一些标记或者数据， React 知道如何处理它们。React 是安全的。我们不生成 HTML 字符串，因此默认阻止了 XSS 攻击。

没必要返回基本的 HTML 结构，可以返回一个你（或者其他人）创建的组件树。而这就是让 React 变得组件化 的特性：一个前端可维护性的关键原则。

记住： 使用这个功能，你的代码就要依赖于 marked 的安全性。在本场景中，我们传入 sanitize: true ，告诉 marked 转义掉评论文本中的 HTML 标签而不是直接原封不动地返回这些标签。

map() 方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。

事件
React 使用驼峰命名规范的方式给组件绑定事件处理器。我们给表单绑定一个onSubmit处理器，用于当表单提交了合法的输入后清空表单字段。

在事件回调中调用 preventDefault() 来避免浏览器默认地提交表单。

当用户提交评论的时候，我们需要刷新评论列表来加进这条新评论。在 CommentBox 中完成所有逻辑是合适的，因为 CommentBox 拥有代表评论列表的状态（ state ）。

我们需要从子组件传数据到它的父组件。我们在父组件的 render 方法中这样做：传递一个新的回调函数（ handleCommentSubmit ）到子组件，绑定它到子组件的 onCommentSubmit 事件上。无论事件什么时候触发，回调函数都会被调用：


Reactive Updates

这个组件的输入被称为 props - "properties"的缩写。它们通过 JSX 语法进行参数传递。你必须知道，在组件里这些属性是不可直接改变的，也就是说 this.props 是只读的。

一个限制: React 组件只能渲染单个根节点。如果你想要返回多个节点，它们必须被包含在同一个节点里。

你不需要为了 React 使用 JSX，可以直接使用纯粹的 JS。但我们更建议使用 JSX , 因为它能定义简洁且我们熟知的包含属性的树状结构语法。

对于非专职开发者（比如设计师）同样比较熟悉。

XML 有固定的标签开启和闭合。这能让复杂的树更易于阅读，优于方法调用和对象字面量的形式。

它没有修改 JavaScript 语义。